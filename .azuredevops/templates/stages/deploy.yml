parameters:
  - name: stage
    type: string
    default: Deploy
  - name: dependsOn
    type: object
    default: []
  - name: condition
    type: string
    default: and(succeeded(), true)
  - name: serviceConnection
    type: string
  - name: project
    type: string

stages:
  - stage: ${{parameters.stage}}
    dependsOn: ${{parameters.dependsOn}}
    condition: ${{parameters.condition}}
    displayName: 'Deploy Project - ${{ parameters.project }}'
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      - template: ../variables/shared.yml@Self
    jobs:
      - deployment: DeployApp
        displayName: 'Deploy Project - ${{ parameters.project }}'
        environment: 'todos-on-azure'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - download: current
                  displayName: 'Download Artifact - ${{ parameters.project }}'
                  artifact: ${{ parameters.project }}

                - task: AzureCLI@1
                  displayName: 'Install Bicep CLI'
                  inputs:
                    azureSubscription: $(serviceConnection)
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az bicep install

                - task: AzureCLI@1
                  displayName: 'Login to ACR'
                  inputs:
                    azureSubscription: $(serviceConnection)
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az acr login -n $(containerRegistry)

                - task: AzureCLI@1
                  displayName: 'Deploy Project Infrastructure - ${{ parameters.project }}'
                  inputs:
                    azureSubscription: $(serviceConnection)
                    scriptLocation: 'inlineScript'
                    inlineScript: >-
                      az deployment sub create -f src/${{ parameters.project }}/main.bicep 
                      --location $(deploymentMetadataLocation) 
                      --parameters 
                      location=$(resourceLocation) 
                      appName=$(appName) 
                      appShortName=$(appShortName)

                - task: AzureFunctionApp@1
                  displayName: 'Deploy Azure Function'
                  inputs:
                    azureSubscription: $(serviceConnection)
                    appType: functionAppLinux
                    appName: func-$(appName)
                    package: '$(Pipeline.Workspace)/**/*.zip'
